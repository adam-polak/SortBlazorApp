@page "/Sorting"
@rendermode InteractiveServer
@inject IJSRuntime JS

<PageTitle>Sorting</PageTitle>
<div class="btnContainer"><button @onclick="MakeList">Randomize</button></div>
<div class="container">
    @foreach (double i in bars) {
        double top = 50.0 - i;
        string marginTop = "" + top + "vh";
        string height = "" + i + "vh";
        <div class="bar" style="margin-top:@marginTop;height:@height;"></div>
    }
</div>
<div class="btnContainer">
    <button @onclick="SortBars">Insertion Sort</button>
    <button>Merge Sort</button>
    <button>Bubble Sort</button>
</div>

@code {

    int num = 0;
    private static int amount = 400;
    double[] bars = new double[amount];
    bool firstTime = true;
    
    private async void MakeList() {
        firstTime = false;
        num = 0;
        bars = new double[amount];
        Random rnd = new Random();
        for(int i = 0; i < amount; i++) {
            bars[i] = rnd.NextDouble() * 49;
        }
        await InvokeAsync(StateHasChanged);
        await Task.Yield();
    }

    private async void SortBars() {
        if(num == amount) return;
        if(firstTime) MakeList();
        
        bool render = InsertionSort(num++);
        if(render) {
            await InvokeAsync(StateHasChanged);
            await Task.Yield();
        }
        Thread.Sleep(20);
        SortBars();
    }

    private bool InsertionSort(int index) {
        int b = 0;
        while(b < index) {
            if(bars[index] < bars[b]) {
                int s = index;
                double temp = bars[index];
                while(s > b) {
                    bars[s] = bars[s - 1];
                    s--;
                }
                bars[b] = temp;
                return true;
            }
            b++;
        }

        return false;
    }
}