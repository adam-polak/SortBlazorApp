@page "/Sorting"
@rendermode InteractiveServer
@inject IJSRuntime JS

<PageTitle>Sorting</PageTitle>
<div class="btnContainer">
    <button id="randomize" @onclick="MakeList">Randomize</button>
</div>
<div class="container">
    @foreach (double i in bars) {
        double top = 50.0 - i;
        string marginTop = "" + top + "vh";
        string height = "" + i + "vh";
        <div class="bar" style="margin-top:@marginTop;height:@height;"></div>
    }
</div>
<div class="btnContainer">
    <button @onclick="InsertionSortBars">Insertion Sort</button>
    <button @onclick="MergeSortBars">Merge Sort</button>
    <button @onclick="BubbleSortBars">Bubble Sort</button>
</div>

@code {

    int num = 0;
    private static int amount = 400;
    double[] bars = new double[amount];
    double[] timedBars = new double[amount];
    PostSortTime? connection;
    bool firstTimeInsertionSort = true;
    bool firstTimeMergeSort = true;

    protected override async Task OnInitializedAsync() {
        MakeList();
        await ForceRender(true);
    }

    private async Task ForceRender(bool value) {
        if(value) {
            await InvokeAsync(StateHasChanged);
            await Task.Yield();
        }
    }
    
    private void MakeList() {
        num = 0;
        Random rnd = new Random();
        for(int i = 0; i < amount; i++) {
            bars[i] = rnd.NextDouble() * 49;
            timedBars[i] = bars[i];
        }
    }

    private async void BubbleSortBars() {
        double swap = 0;
        for(int i = 0; i < amount - 1; i++) {
            if(bars[i + 1] > bars[i]) continue;
            swap = bars[i];
            bars[i] = bars[i + 1];
            bars[i + 1] = swap;
            i = -1;
            Thread.Sleep(20);
            await ForceRender(true);
        }
    }

    private async void MergeSortBars() {
        if(IsBarsSorted()) return;
        double[] tmpBars = new double[amount];
        Array.Copy(bars, tmpBars, amount);
        await BreakUpArray(tmpBars, 0, amount / 2, amount);
        TimedMergeSortBars();
    }

    private void TimedMergeSortBars() {
        double[] tmpBars = new double[amount];
        Array.Copy(timedBars, tmpBars, amount);
        System.GC.Collect();
        var watch = System.Diagnostics.Stopwatch.StartNew();
        TimedBreakUpArray(tmpBars, 0, amount / 2, amount);
        watch.Stop();
        long elapsedNs = watch.ElapsedTicks / 100;
        if(!firstTimeMergeSort) {
            connection = new PostSortTime();
            connection.InsertTime("Merge Sort", elapsedNs);
        } else firstTimeMergeSort = false;
        Console.WriteLine("Merge Sort took " + elapsedNs + " nanoseconds");
    }

    private void TimedBreakUpArray(double[] tmpBars, int start, int middle, int end) {
        if(middle < start || middle == end) return;
        if(end - start + 1 <= 5) SortSmall(start, end);
        int m1 = ((middle - start + 1) / 2) + start;
        int m2 = ((end - middle + 1) / 2) + middle;
        TimedBreakUpArray(tmpBars, start, m1, middle);
        TimedBreakUpArray(tmpBars, middle + 1, m2, end);
        TimedMergeSort(timedBars, tmpBars, start, middle, end);
    }

    private void TimedMergeSort(double[] outArr, double[] tmpBars, int start1, int start2, int end3) {
        int start = start1;
        int outIndex = start1;
        int end1 = start2;
        int end2 = start2 + 1;
        int start3 = end2;
        int lowest = -1;
        while(outIndex < end3) {
            lowest = -1;
            if(start1 < end1) {
                if(start2 < end2) {
                    if(tmpBars[start1] <= tmpBars[start2]) lowest = start1;
                    else lowest = start2;
                    if(start3 == end3 && lowest == start2) start2++;
                }
                if(start3 < end3) {
                    if(lowest != -1) {
                        bool larger = tmpBars[lowest] > tmpBars[start3];
                        if(!larger && lowest == start2) start2++;
                        else if(larger) lowest = start3++;
                    } else {
                        if(tmpBars[start1] <= tmpBars[start3]) lowest = start1;
                        else lowest = start3++;
                    }
                }
                if(lowest == -1 || lowest == start1) lowest = start1++;
            } else if(start2 < end2) {
                if(start3 < end3) {
                    if(tmpBars[start2] <= tmpBars[start3]) lowest = start2;
                    else lowest = start3++;
                } else lowest = start2;
                if(lowest == start2) lowest = start2++;
            } else lowest = start3++;

            outArr[outIndex++] = tmpBars[lowest];
        }
        for(int i = start; i < end3; i++) tmpBars[i] = outArr[i];
    }

    private void SortSmall(int start, int end) {
        int index = start;
        while(index < end) InsertionSort(start, index++);
    }

    private async Task BreakUpArray(double[] tmpBars, int start, int middle, int end) {
        if(middle < start || middle == end) return;
        if(end - start + 1 <= 5) SortSmall(start, end);
        int m1 = ((middle - start + 1) / 2) + start;
        int m2 = ((end - middle + 1) / 2) + middle;
        await BreakUpArray(tmpBars, start, m1, middle);
        await BreakUpArray(tmpBars, middle + 1, m2, end);
        await MergeSort(bars, tmpBars, start, middle, end);
    }

    private async Task MergeSort(double[] outArr, double[] tmpBars, int start1, int start2, int end3) {
        int start = start1;
        int outIndex = start1;
        int end1 = start2;
        int end2 = start2 + 1;
        int start3 = end2;
        int lowest = -1;
        while(outIndex < end3) {
            lowest = -1;
            if(start1 < end1) {
                if(start2 < end2) {
                    if(tmpBars[start1] <= tmpBars[start2]) lowest = start1;
                    else lowest = start2;
                    if(start3 == end3 && lowest == start2) start2++;
                }
                if(start3 < end3) {
                    if(lowest != -1) {
                        bool larger = tmpBars[lowest] > tmpBars[start3];
                        if(!larger && lowest == start2) start2++;
                        else if(larger) lowest = start3++;
                    } else {
                        if(tmpBars[start1] <= tmpBars[start3]) lowest = start1;
                        else lowest = start3++;
                    }
                }
                if(lowest == -1 || lowest == start1) lowest = start1++;
            } else if(start2 < end2) {
                if(start3 < end3) {
                    if(tmpBars[start2] <= tmpBars[start3]) lowest = start2;
                    else lowest = start3++;
                } else lowest = start2;
                if(lowest == start2) lowest = start2++;
            } else lowest = start3++;

            outArr[outIndex++] = tmpBars[lowest];
            Thread.Sleep(5);
            await ForceRender(true);
        }
        for(int i = start; i < end3; i++) tmpBars[i] = outArr[i];
    }

    private bool IsBarsSorted() {
        for(int i = 0; i < amount - 1; i++) {
            if(timedBars[i + 1] < timedBars[i]) return false;
        }
        return true;
    }

    private async void InsertionSortBars() {
        num = amount;
        if(num == amount) {
            TimedInsertionSortBars();
            MakeList();
            return;
        }
        bool render = InsertionSort(0, num++);
        await ForceRender(render);
        Thread.Sleep(20);
        InsertionSortBars();
    }

    private void TimedInsertionSortBars() {
        if(IsBarsSorted()) return;
        int index = 0;
        System.GC.Collect();
        var watch = System.Diagnostics.Stopwatch.StartNew();
        while(index < amount) InsertionSort(timedBars, 0, index++);
        watch.Stop();
        long elapsedNs = watch.ElapsedTicks / 100;
        if(!firstTimeInsertionSort) {
            connection = new PostSortTime();
            connection.InsertTime("Insertion Sort", elapsedNs);
        } else firstTimeInsertionSort = false;
        Console.WriteLine("Insertion sort took " + elapsedNs + " nanoseconds");
    }

    private bool InsertionSort(int b, int index) {
        return InsertionSort(bars, b, index);
    }

    private bool InsertionSort(double[] arr, int b, int index) {
        while(b < index) {
            if(arr[index] < arr[b]) {
                int s = index;
                double temp = arr[index];
                while(s > b) {
                    arr[s] = arr[s - 1];
                    s--;
                }
                arr[b] = temp;
                return true;
            }
            b++;
        }

        return false;
    }
}