@page "/Sorting"
@rendermode InteractiveServer
@inject IJSRuntime JS

<PageTitle>Sorting</PageTitle>
<div class="btnContainer"><button @onclick="MakeList">Randomize</button></div>
<div class="container">
    @foreach (double i in bars) {
        double top = 50.0 - i;
        string marginTop = "" + top + "vh";
        string height = "" + i + "vh";
        <div class="bar" style="margin-top:@marginTop;height:@height;"></div>
    }
</div>
<div class="btnContainer">
    <button @onclick="InsertionSortBars">Insertion Sort</button>
    <button @onclick="MergeSortBars">Merge Sort</button>
    <button>Bubble Sort</button>
</div>

@code {

    int num = 0;
    private static int amount = 400;
    double[] bars = new double[amount];

    protected override async Task OnInitializedAsync() {
        MakeList();
        await ForceRender(true);
    }

    private async Task ForceRender(bool value) {
        if(value) {
            await InvokeAsync(StateHasChanged);
            await Task.Yield();
        }
    }
    
    private void MakeList() {
        num = 0;
        bars = new double[amount];
        Random rnd = new Random();
        for(int i = 0; i < amount; i++) {
            bars[i] = rnd.NextDouble() * 49;
        }
    }

    private async void MergeSortBars() {
        if(num == amount) return;
        await ForceRender(true);
    }

    private void BreakUpArr(int start, int end) {
        if(start == end) return;
        int middle = (end - start) / 2;

    }

    private double[] MergeSort(double[] arr, int start1, int start2, int end3) {
        double[] ans = new double[amount];
        int outIndex = start1;
        int end1 = start2;
        int end2 = start2 + 1;
        int start3 = end2;
        int lowest = -1;
        while(outIndex < end3) {
            if(start1 < end1) {
                if(start2 < end2) {
                    if(arr[start1] <= arr[start2]) lowest = start1;
                    else lowest = start2;
                    if(start3 == end3 && lowest == start2) start2++;
                }
                if(start3 < end3) {
                    if(lowest != -1) {
                        bool larger = arr[lowest] > arr[start3];
                        if(!larger && lowest == start2) start2++;
                        else if(larger) lowest = start3++;
                    } else {
                        if(arr[start1] <= arr[start3]) lowest = start1;
                        else lowest = start3++;
                    }
                }
                if(lowest == -1 || lowest == start1) lowest = start1++;
            } else if(start2 < end2) {
                if(start3 < end3) {
                    if(arr[start2] <= arr[start3]) lowest = start2;
                    else lowest = start3++;
                } else lowest = start2;
                if(lowest == start2) lowest = start2++;
            } else lowest = start3++;

            ans[outIndex++] = arr[lowest];
        }

        return ans;
    }

    private async void InsertionSortBars() {
        if(num == amount) return;
        
        bool render = InsertionSort(num++);
        await ForceRender(render);
        Thread.Sleep(20);
        InsertionSortBars();
    }

    private bool InsertionSort(int index) {
        int b = 0;
        while(b < index) {
            if(bars[index] < bars[b]) {
                int s = index;
                double temp = bars[index];
                while(s > b) {
                    bars[s] = bars[s - 1];
                    s--;
                }
                bars[b] = temp;
                return true;
            }
            b++;
        }

        return false;
    }
}